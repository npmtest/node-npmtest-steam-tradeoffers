{"/home/travis/build/npmtest/node-npmtest-steam-tradeoffers/test.js":"/* istanbul instrument in package npmtest_steam_tradeoffers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-steam-tradeoffers/lib.npmtest_steam_tradeoffers.js":"/* istanbul instrument in package npmtest_steam_tradeoffers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_steam_tradeoffers = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_steam_tradeoffers = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-steam-tradeoffers/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-steam-tradeoffers && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_steam_tradeoffers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_steam_tradeoffers\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_steam_tradeoffers.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_steam_tradeoffers.rollup.js'] =\n            local.assetsDict['/assets.npmtest_steam_tradeoffers.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_steam_tradeoffers.__dirname + '/lib.npmtest_steam_tradeoffers.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-steam-tradeoffers/node_modules/steam-tradeoffers/index.js":"module.exports = SteamTradeOffers;\n\nvar request = require('request');\nvar cheerio = require('cheerio');\nvar Long = require('long');\nvar url = require('url');\nvar vm = require('vm');\nvar querystring = require('querystring');\n\nvar communityURL = 'https://steamcommunity.com';\nvar defaultTimeout = 30000;\n\nfunction SteamTradeOffers() {}\n\nSteamTradeOffers.prototype.setup = function(options) {\n  var requestWrapper = request.defaults({\n    timeout: options.timeout || defaultTimeout\n  });\n\n  if (options.requestOptions) {\n    requestWrapper = requestWrapper.defaults(options.requestOptions);\n  }\n\n  this._j = request.jar();\n  this._requestCommunity = requestWrapper.defaults({\n    jar: this._j\n  });\n\n  this._requestAPI = requestWrapper;\n\n  this.APIKey = options.APIKey;\n\n  this.sessionID = options.sessionID;\n\n  options.webCookie.forEach(function(name) {\n    setCookie.bind(this)(name);\n  }.bind(this));\n};\n\nSteamTradeOffers.prototype.getOfferToken = function(callback) {\n  this.getOfferUrl(function(error, offerUrl) {\n    if (error) {\n      return callback(error);\n    }\n\n    var offerToken = url.parse(offerUrl, true).query.token;\n    callback(null, offerToken);\n  });\n};\n\nSteamTradeOffers.prototype.getOfferUrl = function(callback) {\n  this._requestCommunity.get({\n    // http because Steam CDN is broken\n    uri: 'http://steamcommunity.com/my/tradeoffers/privacy'\n  }, function(error, response, body) {\n    if (error || (response && response.statusCode !== 200)) {\n      return callback(error || new Error(response.statusCode));\n    }\n    if (!body) {\n      return callback(new Error('Invalid Response'));\n    }\n\n    var $ = cheerio.load(body);\n    var offerUrl = $('input#trade_offer_access_url').val();\n\n    if (!offerUrl) {\n      return callback(new Error('Invalid Response'));\n    }\n\n    callback(null, offerUrl);\n  }.bind(this));\n};\n\nSteamTradeOffers.prototype.getTradeHoldDuration = function(options, callback) {\n  var url = communityURL + '/tradeoffer/' + options.tradeOfferId + '/';\n\n  getHoldDuration.bind(this)(url, callback);\n};\n\nSteamTradeOffers.prototype.getHoldDuration = function(options, callback) {\n  var query = {\n    partner: options.partnerAccountId || toAccountId(options.partnerSteamId)\n  };\n\n  if (options.accessToken) {\n    query.token = options.accessToken;\n  }\n\n  var url = communityURL + '/tradeoffer/new/?' + querystring.stringify(query);\n\n  getHoldDuration.bind(this)(url, callback);\n};\n\nSteamTradeOffers.prototype.loadMyInventory = function(options, callback) {\n  var query = {};\n\n  if (options.language) {\n    query.l = options.language;\n  }\n\n  if (options.tradableOnly !== false) {\n    query.trading = 1;\n  }\n\n  var uri = communityURL + '/my/inventory/json/' + options.appId +\n    '/' + options.contextId + '/?' + querystring.stringify(query);\n\n  loadInventory.bind(this)({\n    uri: uri,\n    contextId: options.contextId\n  }, callback);\n};\n\nSteamTradeOffers.prototype.loadPartnerInventory = function(options, callback) {\n  var form = {\n    sessionid: this.sessionID,\n    partner: options.partnerSteamId || toSteamId(options.partnerAccountId),\n    appid: options.appId,\n    contextid: options.contextId\n  };\n\n  if (options.language) {\n    form.l = options.language;\n  }\n\n  var offer = 'new';\n  if (options.tradeOfferId) {\n    offer = options.tradeOfferId;\n  }\n\n  var uri = communityURL + '/tradeoffer/' + offer +\n    '/partnerinventory/?' + querystring.stringify(form);\n\n  loadInventory.bind(this)({\n    uri: uri,\n    headers: {\n      referer: communityURL + '/tradeoffer/' + offer +\n        '/?partner=' + toAccountId(form.partner)\n    },\n    contextId: options.contextId\n  }, callback);\n};\n\nSteamTradeOffers.prototype.getOffers = function(options, callback) {\n  doAPICall.bind(this)({\n    method: 'GetTradeOffers/v1',\n    params: options,\n    callback: function(error, res) {\n      if (error) {\n        return callback(error);\n      }\n\n      if (res.response.trade_offers_received !== undefined) {\n        res.response.trade_offers_received = res.response.trade_offers_received.map(function(offer) {\n          offer.steamid_other = toSteamId(offer.accountid_other);\n          return offer;\n        });\n      }\n\n      if (res.response.trade_offers_sent !== undefined) {\n        res.response.trade_offers_sent = res.response.trade_offers_sent.map(function(offer) {\n          offer.steamid_other = toSteamId(offer.accountid_other);\n          return offer;\n        });\n      }\n\n      callback(null, res);\n    }\n  });\n};\n\nSteamTradeOffers.prototype.getOffer = function(options, callback) {\n  doAPICall.bind(this)({\n    method: 'GetTradeOffer/v1',\n    params: options,\n    callback: function(error, res) {\n      if (error) {\n        return callback(error);\n      }\n\n      if (res.response.offer !== undefined) {\n        res.response.offer.steamid_other = toSteamId(res.response.offer.accountid_other);\n      }\n\n      callback(null, res);\n    }\n  });\n};\n\nSteamTradeOffers.prototype.getSummary = function(options, callback) {\n  doAPICall.bind(this)({\n    method: 'GetTradeOffersSummary/v1',\n    params: options,\n    callback: callback\n  });\n};\n\nSteamTradeOffers.prototype.declineOffer = function(options, callback) {\n  doAPICall.bind(this)({\n    method: 'DeclineTradeOffer/v1',\n    params: {\n      tradeofferid: options.tradeOfferId\n    },\n    post: true,\n    callback: callback\n  });\n};\n\nSteamTradeOffers.prototype.cancelOffer = function(options, callback) {\n  doAPICall.bind(this)({\n    method: 'CancelTradeOffer/v1',\n    params: {\n      tradeofferid: options.tradeOfferId\n    },\n    post: true,\n    callback: callback\n  });\n};\n\nSteamTradeOffers.prototype.acceptOffer = function(options, callback) {\n  var cb = function () {\n    if (typeof callback === 'function') {\n      callback.apply(null, arguments);\n    }\n  };\n\n  var formFields = {\n    sessionid: this.sessionID,\n    serverid: 1,\n    tradeofferid: options.tradeOfferId\n  };\n\n  if (options.partnerSteamId) {\n    formFields.partner = options.partnerSteamId;\n  }\n\n  this._requestCommunity.post({\n    uri: communityURL + '/tradeoffer/' + options.tradeOfferId + '/accept',\n    headers: {\n      referer: communityURL + '/tradeoffer/' + options.tradeOfferId + '/'\n    },\n    json: true,\n    form: formFields\n  }, function(error, response, body) {\n    if (error) {\n      return cb(error);\n    }\n    if (body && body.strError) {\n      return cb(new Error(body.strError));\n    }\n    if (response && response.statusCode !== 200) {\n      return cb(new Error(response.statusCode));\n    }\n    if (!body) {\n      return cb(new Error('Invalid Response'));\n    }\n\n    cb(null, body);\n  }.bind(this));\n};\n\nSteamTradeOffers.prototype.makeOffer = function(options, callback) {\n  var cb = function () {\n    if (typeof callback === 'function') {\n      callback.apply(null, arguments);\n    }\n  };\n\n  var tradeoffer = {\n    newversion: true,\n    version: 2,\n    me: { assets: options.itemsFromMe, currency: [], ready: false },\n    them: { assets: options.itemsFromThem, currency: [], ready: false }\n  };\n\n  var formFields = {\n    serverid: 1,\n    sessionid: this.sessionID,\n    partner: options.partnerSteamId || toSteamId(options.partnerAccountId),\n    tradeoffermessage: options.message || '',\n    json_tradeoffer: JSON.stringify(tradeoffer)\n  };\n\n  var query = {\n    partner: options.partnerAccountId || toAccountId(options.partnerSteamId)\n  };\n\n  if (options.accessToken !== undefined) {\n    formFields.trade_offer_create_params = JSON.stringify({\n      trade_offer_access_token: options.accessToken\n    });\n    query.token = options.accessToken;\n  }\n\n  var referer;\n  if (options.counteredTradeOffer !== undefined) {\n    formFields.tradeofferid_countered = options.counteredTradeOffer;\n    referer = communityURL + '/tradeoffer/' + options.counteredTradeOffer + '/';\n  } else {\n    referer = communityURL + '/tradeoffer/new/?' + querystring.stringify(query);\n  }\n\n  this._requestCommunity.post({\n    uri: communityURL + '/tradeoffer/new/send',\n    headers: {\n      referer: referer\n    },\n    json: true,\n    form: formFields\n  }, function(error, response, body) {\n    if (error) {\n      return cb(error);\n    }\n    if (body && body.strError) {\n      return cb(new Error(body.strError));\n    }\n    if (response && response.statusCode !== 200) {\n      return cb(new Error(response.statusCode));\n    }\n    if (!body) {\n      return cb(new Error('Invalid Response'));\n    }\n\n    cb(null, body);\n  }.bind(this));\n};\n\nSteamTradeOffers.prototype.getItems = function(options, callback) {\n  // Derived from node-steam-trade\n  // https://github.com/seishun/node-steam-trade/blob/master/index.js#L86-L119\n  this._requestCommunity.get({\n    uri: communityURL + '/trade/' + options.tradeId + '/receipt/'\n  }, function(err, response, body) {\n    if (err || (response && response.statusCode !== 200)) {\n      return callback(err || new Error(response.statusCode));\n    }\n    if (!body) {\n      return callback(new Error('Invalid Response'));\n    }\n\n    var script = body.match(/(var oItem;[\\s\\S]*)<\\/script>/);\n    if (!script) {\n      return callback(new Error('No session'));\n    }\n\n    var sandbox = {\n      items: []\n    };\n\n    // prepare to execute the script in new context\n    var code = 'var UserYou;' +\n      'function BuildHover(str, item) {' +\n        'items.push(item);' +\n      '}' +\n      'function $() {' +\n        'return {' +\n          'show: function() {}' +\n        '};' +\n      '}' +\n      script[1];\n\n    vm.runInNewContext(code, sandbox);\n\n    callback(null, sandbox.items);\n  });\n};\n\nfunction setCookie(cookie) {\n  this._j.setCookie(request.cookie(cookie), communityURL);\n}\n\nfunction toSteamId(accountId) {\n  return new Long(parseInt(accountId, 10), 0x1100001).toString();\n}\n\nfunction toAccountId(steamId) {\n  return Long.fromString(steamId).toInt().toString();\n}\n\nfunction mergeRawInventory (raw, rawBody) {\n  var body = JSON.parse(JSON.stringify(rawBody));\n  var rgInventory = raw.rgInventory || {};\n  var rgCurrency = raw.rgCurrency || {};\n  var rgDescriptions = raw.rgDescriptions || {};\n\n  return {\n    rgInventory: mergeObjects(rgInventory, body.rgInventory),\n    rgCurrency: mergeObjects(rgCurrency, body.rgCurrency),\n    rgDescriptions: mergeObjects(rgDescriptions, body.rgDescriptions)\n  };\n}\n\nfunction mergeInventory(inventory, body, contextId) {\n  return inventory.concat(\n    mergeWithDescriptions(body.rgInventory, body.rgDescriptions, contextId)\n      .concat(\n        mergeWithDescriptions(body.rgCurrency, body.rgDescriptions, contextId)\n      )\n  );\n}\n\nfunction mergeWithDescriptions(items, descriptions, contextid) {\n  return Object.keys(items).map(function(id) {\n    var item = items[id];\n    var description = descriptions[item.classid + '_' + (item.instanceid || '0')];\n    for (var key in description) {\n      if (description.hasOwnProperty(key)) {\n        item[key] = description[key];\n      }\n    }\n    // add contextid because Steam is retarded\n    item.contextid = contextid;\n    return item;\n  });\n}\n\nfunction mergeObjects() {\n  var result = {};\n  for (var i = 0; i < arguments.length; i++) {\n    for (var index in arguments[i]) {\n      if (arguments[i].hasOwnProperty(index)) {\n        result[index] = arguments[i][index];\n      }\n    }\n  }\n  return result;\n}\n\nfunction loadInventory(options, callback) {\n  options.inventory = options.inventory || [];\n  options.raw = options.raw || {};\n\n  var requestParams = {\n    uri: options.uri,\n    json: true\n  };\n\n  if (options.start) {\n    requestParams.uri += '&start=' + options.start;\n  }\n\n  if (options.headers) {\n    requestParams.headers = options.headers;\n  }\n\n  this._requestCommunity.get(requestParams, function(error, response, body) {\n    if (error) {\n      return callback(error);\n    }\n    if (body && body.error) {\n      return callback(new Error(body.error));\n    }\n    if (response && response.statusCode !== 200) {\n      return callback(new Error(response.statusCode));\n    }\n    if (!body || !body.rgInventory || !body.rgDescriptions || !body.rgCurrency) {\n      return callback(new Error('Invalid Response'));\n    }\n\n    options.raw = mergeRawInventory(options.raw, body);\n    options.inventory = mergeInventory(options.inventory, body, options.contextId);\n\n    if (body.more) {\n      options.start = body.more_start;\n      loadInventory.bind(this)(options, callback);\n    } else {\n      callback(null, options.inventory, options.raw);\n    }\n  }.bind(this));\n}\n\nfunction doAPICall(options) {\n  var cb = function () {\n    if (typeof options.callback === 'function') {\n      options.callback.apply(null, arguments);\n    }\n  };\n\n  var httpMethod = options.post ? 'post' : 'get';\n\n  var params = {\n    uri: 'https://api.steampowered.com/IEconService/' + options.method +\n      '/?key=' + this.APIKey +\n      ((options.post) ? '' : '&' + querystring.stringify(options.params)),\n    json: true\n  };\n\n  if (options.post) {\n    params.form = options.params;\n  }\n\n  this._requestAPI[httpMethod](params, function(error, response, body) {\n    if (error || (response && response.statusCode !== 200)) {\n      return cb(error || new Error(response.statusCode));\n    }\n    if (!body || typeof body !== 'object') {\n      return cb(new Error('Invalid Response'));\n    }\n    cb(null, body);\n  }.bind(this));\n}\n\nfunction getHoldDuration (url, callback) {\n  this._requestCommunity.get({\n    uri: url\n  }, function(error, response, body) {\n    if (error || (response && response.statusCode !== 200)) {\n      return callback(error || new Error(response.statusCode));\n    }\n    if (!body) {\n      return callback(new Error('Invalid Response'));\n    }\n\n    var $ = cheerio.load(body);\n    var scriptToExec = '';\n    var status = $('script').get().some(function (script) {\n      if (!script.children[0]) {\n        return false;\n      }\n      var text = script.children[0].data;\n      if (/var g_daysMyEscrow/.test(text)) {\n        scriptToExec = text;\n        return true;\n      }\n      return false;\n    });\n\n    if (!status) {\n      var errorMsg;\n\n      if ($('#error_msg').length > 0) {\n        errorMsg = $('#error_msg').text().trim();\n      }\n\n      var message = errorMsg || 'Can\\'t get hold duration';\n\n      return callback(new Error(message));\n    }\n\n    var sandbox = {\n      data: {}\n    };\n\n    // prepare to execute the script in new context\n    var code = scriptToExec + \n      'data.my = g_daysMyEscrow;' +\n      'data.their = g_daysTheirEscrow;';\n\n    vm.runInNewContext(code, sandbox);\n\n    callback(null, sandbox.data);\n  }.bind(this));\n}\n"}